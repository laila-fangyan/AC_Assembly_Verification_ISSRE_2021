[%var n: Integer =1;%]
[% for (l in AssertedEvidence.allInstances.select(l|l.target.first().
description.content.value.content.first().
startsWith("Safety measure shall be validated by {FDR validation of reachability"))) {%]

Assertion [%=n%]:  [%=l.getStateName().getStateMachine() %] :: [%=l.getStateName()%] is reachable in [%=l.getStateName().getStateMachine() %]. 
[%n=n+1;%]
[% } %]


[% operation AssertedEvidence getStateMachineName() :String {
var str: String; 
 var substr : String; 
str = self.target.first().description.content.value.content.first();
substr = str.substring(str.indexOf("state machine {")+15, str.indexOf("} }"));
 return substr; 
}%]


[% operation AssertedEvidence getStateName():String {
var str: String; 
var substr : String;
str =self.target.first().description.content.value.content.first();
substr = str.substring(str.indexOf("The state {")+11, str.indexOf("} is reachable"));
return substr; 
}%]

[%operation String getStateMachine() : String {
for (stm in RC!StateMachineDef.allInstances()){

for (x in stm.nodes){
if(x.isTypeOf(RC!State) and x.name= self){
//("ddd" + stm.name).println();
return stm.name;
}
}
}
}
%]